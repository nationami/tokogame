package com.tokogame.domain;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KategoriExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table kategori
     *
     * @ibatorgenerated Fri Apr 19 07:17:48 ICT 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table kategori
     *
     * @ibatorgenerated Fri Apr 19 07:17:48 ICT 2013
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table kategori
     *
     * @ibatorgenerated Fri Apr 19 07:17:48 ICT 2013
     */
    public KategoriExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table kategori
     *
     * @ibatorgenerated Fri Apr 19 07:17:48 ICT 2013
     */
    protected KategoriExample(KategoriExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table kategori
     *
     * @ibatorgenerated Fri Apr 19 07:17:48 ICT 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table kategori
     *
     * @ibatorgenerated Fri Apr 19 07:17:48 ICT 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table kategori
     *
     * @ibatorgenerated Fri Apr 19 07:17:48 ICT 2013
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table kategori
     *
     * @ibatorgenerated Fri Apr 19 07:17:48 ICT 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table kategori
     *
     * @ibatorgenerated Fri Apr 19 07:17:48 ICT 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table kategori
     *
     * @ibatorgenerated Fri Apr 19 07:17:48 ICT 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table kategori
     *
     * @ibatorgenerated Fri Apr 19 07:17:48 ICT 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table kategori
     *
     * @ibatorgenerated Fri Apr 19 07:17:48 ICT 2013
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andPkKategoriIsNull() {
            addCriterion("pk_kategori is null");
            return this;
        }

        public Criteria andPkKategoriIsNotNull() {
            addCriterion("pk_kategori is not null");
            return this;
        }

        public Criteria andPkKategoriEqualTo(Integer value) {
            addCriterion("pk_kategori =", value, "pkKategori");
            return this;
        }

        public Criteria andPkKategoriNotEqualTo(Integer value) {
            addCriterion("pk_kategori <>", value, "pkKategori");
            return this;
        }

        public Criteria andPkKategoriGreaterThan(Integer value) {
            addCriterion("pk_kategori >", value, "pkKategori");
            return this;
        }

        public Criteria andPkKategoriGreaterThanOrEqualTo(Integer value) {
            addCriterion("pk_kategori >=", value, "pkKategori");
            return this;
        }

        public Criteria andPkKategoriLessThan(Integer value) {
            addCriterion("pk_kategori <", value, "pkKategori");
            return this;
        }

        public Criteria andPkKategoriLessThanOrEqualTo(Integer value) {
            addCriterion("pk_kategori <=", value, "pkKategori");
            return this;
        }

        public Criteria andPkKategoriIn(List<Integer> values) {
            addCriterion("pk_kategori in", values, "pkKategori");
            return this;
        }

        public Criteria andPkKategoriNotIn(List<Integer> values) {
            addCriterion("pk_kategori not in", values, "pkKategori");
            return this;
        }

        public Criteria andPkKategoriBetween(Integer value1, Integer value2) {
            addCriterion("pk_kategori between", value1, value2, "pkKategori");
            return this;
        }

        public Criteria andPkKategoriNotBetween(Integer value1, Integer value2) {
            addCriterion("pk_kategori not between", value1, value2, "pkKategori");
            return this;
        }

        public Criteria andKategoriNameIsNull() {
            addCriterion("kategori_name is null");
            return this;
        }

        public Criteria andKategoriNameIsNotNull() {
            addCriterion("kategori_name is not null");
            return this;
        }

        public Criteria andKategoriNameEqualTo(String value) {
            addCriterion("kategori_name =", value, "kategoriName");
            return this;
        }

        public Criteria andKategoriNameNotEqualTo(String value) {
            addCriterion("kategori_name <>", value, "kategoriName");
            return this;
        }

        public Criteria andKategoriNameGreaterThan(String value) {
            addCriterion("kategori_name >", value, "kategoriName");
            return this;
        }

        public Criteria andKategoriNameGreaterThanOrEqualTo(String value) {
            addCriterion("kategori_name >=", value, "kategoriName");
            return this;
        }

        public Criteria andKategoriNameLessThan(String value) {
            addCriterion("kategori_name <", value, "kategoriName");
            return this;
        }

        public Criteria andKategoriNameLessThanOrEqualTo(String value) {
            addCriterion("kategori_name <=", value, "kategoriName");
            return this;
        }

        public Criteria andKategoriNameLike(String value) {
            addCriterion("kategori_name like", value, "kategoriName");
            return this;
        }

        public Criteria andKategoriNameNotLike(String value) {
            addCriterion("kategori_name not like", value, "kategoriName");
            return this;
        }

        public Criteria andKategoriNameIn(List<String> values) {
            addCriterion("kategori_name in", values, "kategoriName");
            return this;
        }

        public Criteria andKategoriNameNotIn(List<String> values) {
            addCriterion("kategori_name not in", values, "kategoriName");
            return this;
        }

        public Criteria andKategoriNameBetween(String value1, String value2) {
            addCriterion("kategori_name between", value1, value2, "kategoriName");
            return this;
        }

        public Criteria andKategoriNameNotBetween(String value1, String value2) {
            addCriterion("kategori_name not between", value1, value2, "kategoriName");
            return this;
        }

        public Criteria andKategoriDescIsNull() {
            addCriterion("kategori_desc is null");
            return this;
        }

        public Criteria andKategoriDescIsNotNull() {
            addCriterion("kategori_desc is not null");
            return this;
        }

        public Criteria andKategoriDescEqualTo(String value) {
            addCriterion("kategori_desc =", value, "kategoriDesc");
            return this;
        }

        public Criteria andKategoriDescNotEqualTo(String value) {
            addCriterion("kategori_desc <>", value, "kategoriDesc");
            return this;
        }

        public Criteria andKategoriDescGreaterThan(String value) {
            addCriterion("kategori_desc >", value, "kategoriDesc");
            return this;
        }

        public Criteria andKategoriDescGreaterThanOrEqualTo(String value) {
            addCriterion("kategori_desc >=", value, "kategoriDesc");
            return this;
        }

        public Criteria andKategoriDescLessThan(String value) {
            addCriterion("kategori_desc <", value, "kategoriDesc");
            return this;
        }

        public Criteria andKategoriDescLessThanOrEqualTo(String value) {
            addCriterion("kategori_desc <=", value, "kategoriDesc");
            return this;
        }

        public Criteria andKategoriDescLike(String value) {
            addCriterion("kategori_desc like", value, "kategoriDesc");
            return this;
        }

        public Criteria andKategoriDescNotLike(String value) {
            addCriterion("kategori_desc not like", value, "kategoriDesc");
            return this;
        }

        public Criteria andKategoriDescIn(List<String> values) {
            addCriterion("kategori_desc in", values, "kategoriDesc");
            return this;
        }

        public Criteria andKategoriDescNotIn(List<String> values) {
            addCriterion("kategori_desc not in", values, "kategoriDesc");
            return this;
        }

        public Criteria andKategoriDescBetween(String value1, String value2) {
            addCriterion("kategori_desc between", value1, value2, "kategoriDesc");
            return this;
        }

        public Criteria andKategoriDescNotBetween(String value1, String value2) {
            addCriterion("kategori_desc not between", value1, value2, "kategoriDesc");
            return this;
        }
    }
}