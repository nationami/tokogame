package com.tokogame.domain;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OpnameExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table opname
     *
     * @ibatorgenerated Thu May 16 11:40:28 ICT 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table opname
     *
     * @ibatorgenerated Thu May 16 11:40:28 ICT 2013
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table opname
     *
     * @ibatorgenerated Thu May 16 11:40:28 ICT 2013
     */
    public OpnameExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table opname
     *
     * @ibatorgenerated Thu May 16 11:40:28 ICT 2013
     */
    protected OpnameExample(OpnameExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table opname
     *
     * @ibatorgenerated Thu May 16 11:40:28 ICT 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table opname
     *
     * @ibatorgenerated Thu May 16 11:40:28 ICT 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table opname
     *
     * @ibatorgenerated Thu May 16 11:40:28 ICT 2013
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table opname
     *
     * @ibatorgenerated Thu May 16 11:40:28 ICT 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table opname
     *
     * @ibatorgenerated Thu May 16 11:40:28 ICT 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table opname
     *
     * @ibatorgenerated Thu May 16 11:40:28 ICT 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table opname
     *
     * @ibatorgenerated Thu May 16 11:40:28 ICT 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table opname
     *
     * @ibatorgenerated Thu May 16 11:40:28 ICT 2013
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andPkOpnameIsNull() {
            addCriterion("pk_opname is null");
            return this;
        }

        public Criteria andPkOpnameIsNotNull() {
            addCriterion("pk_opname is not null");
            return this;
        }

        public Criteria andPkOpnameEqualTo(Integer value) {
            addCriterion("pk_opname =", value, "pkOpname");
            return this;
        }

        public Criteria andPkOpnameNotEqualTo(Integer value) {
            addCriterion("pk_opname <>", value, "pkOpname");
            return this;
        }

        public Criteria andPkOpnameGreaterThan(Integer value) {
            addCriterion("pk_opname >", value, "pkOpname");
            return this;
        }

        public Criteria andPkOpnameGreaterThanOrEqualTo(Integer value) {
            addCriterion("pk_opname >=", value, "pkOpname");
            return this;
        }

        public Criteria andPkOpnameLessThan(Integer value) {
            addCriterion("pk_opname <", value, "pkOpname");
            return this;
        }

        public Criteria andPkOpnameLessThanOrEqualTo(Integer value) {
            addCriterion("pk_opname <=", value, "pkOpname");
            return this;
        }

        public Criteria andPkOpnameIn(List<Integer> values) {
            addCriterion("pk_opname in", values, "pkOpname");
            return this;
        }

        public Criteria andPkOpnameNotIn(List<Integer> values) {
            addCriterion("pk_opname not in", values, "pkOpname");
            return this;
        }

        public Criteria andPkOpnameBetween(Integer value1, Integer value2) {
            addCriterion("pk_opname between", value1, value2, "pkOpname");
            return this;
        }

        public Criteria andPkOpnameNotBetween(Integer value1, Integer value2) {
            addCriterion("pk_opname not between", value1, value2, "pkOpname");
            return this;
        }

        public Criteria andTanggalOpnameIsNull() {
            addCriterion("tanggal_opname is null");
            return this;
        }

        public Criteria andTanggalOpnameIsNotNull() {
            addCriterion("tanggal_opname is not null");
            return this;
        }

        public Criteria andTanggalOpnameEqualTo(Date value) {
            addCriterion("tanggal_opname =", value, "tanggalOpname");
            return this;
        }

        public Criteria andTanggalOpnameNotEqualTo(Date value) {
            addCriterion("tanggal_opname <>", value, "tanggalOpname");
            return this;
        }

        public Criteria andTanggalOpnameGreaterThan(Date value) {
            addCriterion("tanggal_opname >", value, "tanggalOpname");
            return this;
        }

        public Criteria andTanggalOpnameGreaterThanOrEqualTo(Date value) {
            addCriterion("tanggal_opname >=", value, "tanggalOpname");
            return this;
        }

        public Criteria andTanggalOpnameLessThan(Date value) {
            addCriterion("tanggal_opname <", value, "tanggalOpname");
            return this;
        }

        public Criteria andTanggalOpnameLessThanOrEqualTo(Date value) {
            addCriterion("tanggal_opname <=", value, "tanggalOpname");
            return this;
        }

        public Criteria andTanggalOpnameIn(List<Date> values) {
            addCriterion("tanggal_opname in", values, "tanggalOpname");
            return this;
        }

        public Criteria andTanggalOpnameNotIn(List<Date> values) {
            addCriterion("tanggal_opname not in", values, "tanggalOpname");
            return this;
        }

        public Criteria andTanggalOpnameBetween(Date value1, Date value2) {
            addCriterion("tanggal_opname between", value1, value2, "tanggalOpname");
            return this;
        }

        public Criteria andTanggalOpnameNotBetween(Date value1, Date value2) {
            addCriterion("tanggal_opname not between", value1, value2, "tanggalOpname");
            return this;
        }

        public Criteria andTotalSelisihIsNull() {
            addCriterion("total_selisih is null");
            return this;
        }

        public Criteria andTotalSelisihIsNotNull() {
            addCriterion("total_selisih is not null");
            return this;
        }

        public Criteria andTotalSelisihEqualTo(Integer value) {
            addCriterion("total_selisih =", value, "totalSelisih");
            return this;
        }

        public Criteria andTotalSelisihNotEqualTo(Integer value) {
            addCriterion("total_selisih <>", value, "totalSelisih");
            return this;
        }

        public Criteria andTotalSelisihGreaterThan(Integer value) {
            addCriterion("total_selisih >", value, "totalSelisih");
            return this;
        }

        public Criteria andTotalSelisihGreaterThanOrEqualTo(Integer value) {
            addCriterion("total_selisih >=", value, "totalSelisih");
            return this;
        }

        public Criteria andTotalSelisihLessThan(Integer value) {
            addCriterion("total_selisih <", value, "totalSelisih");
            return this;
        }

        public Criteria andTotalSelisihLessThanOrEqualTo(Integer value) {
            addCriterion("total_selisih <=", value, "totalSelisih");
            return this;
        }

        public Criteria andTotalSelisihIn(List<Integer> values) {
            addCriterion("total_selisih in", values, "totalSelisih");
            return this;
        }

        public Criteria andTotalSelisihNotIn(List<Integer> values) {
            addCriterion("total_selisih not in", values, "totalSelisih");
            return this;
        }

        public Criteria andTotalSelisihBetween(Integer value1, Integer value2) {
            addCriterion("total_selisih between", value1, value2, "totalSelisih");
            return this;
        }

        public Criteria andTotalSelisihNotBetween(Integer value1, Integer value2) {
            addCriterion("total_selisih not between", value1, value2, "totalSelisih");
            return this;
        }

        public Criteria andTotalBiayaIsNull() {
            addCriterion("total_biaya is null");
            return this;
        }

        public Criteria andTotalBiayaIsNotNull() {
            addCriterion("total_biaya is not null");
            return this;
        }

        public Criteria andTotalBiayaEqualTo(Integer value) {
            addCriterion("total_biaya =", value, "totalBiaya");
            return this;
        }

        public Criteria andTotalBiayaNotEqualTo(Integer value) {
            addCriterion("total_biaya <>", value, "totalBiaya");
            return this;
        }

        public Criteria andTotalBiayaGreaterThan(Integer value) {
            addCriterion("total_biaya >", value, "totalBiaya");
            return this;
        }

        public Criteria andTotalBiayaGreaterThanOrEqualTo(Integer value) {
            addCriterion("total_biaya >=", value, "totalBiaya");
            return this;
        }

        public Criteria andTotalBiayaLessThan(Integer value) {
            addCriterion("total_biaya <", value, "totalBiaya");
            return this;
        }

        public Criteria andTotalBiayaLessThanOrEqualTo(Integer value) {
            addCriterion("total_biaya <=", value, "totalBiaya");
            return this;
        }

        public Criteria andTotalBiayaIn(List<Integer> values) {
            addCriterion("total_biaya in", values, "totalBiaya");
            return this;
        }

        public Criteria andTotalBiayaNotIn(List<Integer> values) {
            addCriterion("total_biaya not in", values, "totalBiaya");
            return this;
        }

        public Criteria andTotalBiayaBetween(Integer value1, Integer value2) {
            addCriterion("total_biaya between", value1, value2, "totalBiaya");
            return this;
        }

        public Criteria andTotalBiayaNotBetween(Integer value1, Integer value2) {
            addCriterion("total_biaya not between", value1, value2, "totalBiaya");
            return this;
        }
    }
}